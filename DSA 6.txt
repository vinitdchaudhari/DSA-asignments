#include <iostream>
using namespace std;

struct Node 
{
   public:
  int data;
  Node *left;
  Node *right;
  int height;
};

int max(int a, int b);

int height(Node *N) 
{
  if (N == NULL)
    return 0;
  return N->height;
}

int max(int a, int b) 
{
  return (a > b) ? a : b;
}

Node *newNode(int data) 
{
  Node *node = new Node();
  node->data = data;
  node->left = NULL;
  node->right = NULL;
  node->height = 1;
  return (node);
}

Node *rightRotate(Node *y) 
{
  Node *x = y->left;
  Node *T2 = x->right;
  x->right = y;
  y->left = T2;
  y->height = max(height(y->left),
          height(y->right)) +
        1;
  x->height = max(height(x->left),
          height(x->right)) +
        1;
  return x;
}

Node *leftRotate(Node *x) 
{
  Node *y = x->right;
  Node *T2 = y->left;
  y->left = x;
  x->right = T2;
  x->height = max(height(x->left),
          height(x->right)) +
        1;
  y->height = max(height(y->left),
          height(y->right)) +
        1;
  return y;
}

int getBalanceFactor(Node *N) 
{
  if (N == NULL)
    return 0;
  return height(N->left) -
       height(N->right);
}

Node *insertNode(Node *node, int data)
{
  if (node == NULL)
    return (newNode(data));
  if (data < node->data)
    node->left = insertNode(node->left, data);
  else if (data > node->data)
    node->right = insertNode(node->right, data);
  else
    return node;
  
  node->height = 1 + max(height(node->left),
  height(node->right));
  
  int balanceFactor = getBalanceFactor(node);
  if (balanceFactor > 1) 
  {
    if (data < node->left->data) 
    {
      return rightRotate(node);
    } 
    else if (data > node->left->data) 
    {
      node->left = leftRotate(node->left);
      return rightRotate(node);
    }
  }
  if (balanceFactor < -1) 
  {
    if (data > node->right->data) 
    {
      return leftRotate(node);
    } 
    else if (data < node->right->data) 
    {
      node->right = rightRotate(node->right);
      return leftRotate(node);
    }
  }
  return node;
}

Node *nodeWithMimumValue(Node *node)
{
  Node *current = node;
  while (current->left != NULL)
    current = current->left;
  return current;
}

Node *deleteNode(Node *root, int data) 
{
  if (root == NULL)
    return root;
  if (data < root->data)
    root->left = deleteNode(root->left, data);
  else if (data > root->data)
    root->right = deleteNode(root->right, data);
  else 
  {
    if ((root->left == NULL) || (root->right == NULL)) 
    {
      Node *temp = root->left ? root->left : root->right;
      if (temp == NULL) 
      {
        temp = root;
        root = NULL;
      } 
      else
        *root = *temp;
      free(temp);
    } 
    else 
    {
      Node *temp = nodeWithMimumValue(root->right);
      root->data = temp->data;
      root->right = deleteNode(root->right,temp->data);
    }
  }

  if (root == NULL)
    return root;
   root->height = 1 + max(height(root->left),
               height(root->right));
  int balanceFactor = getBalanceFactor(root);
  if (balanceFactor > 1) 
  {
    if (getBalanceFactor(root->left) >= 0) 
    {
      return rightRotate(root);
    } 
    else
    {
      root->left = leftRotate(root->left);
      return rightRotate(root);
    }
  }
  if (balanceFactor < -1) 
  {
    if (getBalanceFactor(root->right) <= 0) 
      return leftRotate(root);
    else 
    {
      root->right = rightRotate(root->right);
      return leftRotate(root);
    }
  }
  return root;
}

void inorder(struct Node *root) 
{
  if (root != NULL) 
  {
    inorder(root->left);
    cout << root->data << " -> ";
    inorder(root->right);
  }
}

int main() 
{
  Node *root = NULL;
  int ch;
  cout << "AVL TREE ";
  do
  {
  cout<<"\n1.Insert"<<endl;
  cout<<"2.Delete"<<endl;
  cout<<"3.Display"<<endl;
  cout<<"0.Exit"<<endl;

  cout<<"\nEnter your choice : ";
  cin>>ch;

  switch(ch)
  {
    case 1:
      cout<<"\nEnter Data : ";
      int data;
      cin>>data;
      root = insertNode(root, data);
    break;

    case 2:
      cout<<"\nEnter Key to Dekete : ";
      int del;
      cin>>del;
      root = deleteNode(root, del);
    break;

    case 3:
      cout<<"\nTree : ";
      inorder(root);
    break;

    case 0:
    cout<<"End";
    break;
  }
  }while(ch!=0);
  
}