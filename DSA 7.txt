//Vinit Chaudhari(SYCOA34)
#include <iostream>
using namespace std;
int q[20], a[20][20], visited[20], stack[20];
int top = -1, front = -1, rear = -1;
void add(int item) 
{
  if (rear == 19)
    cout<<"QUEUE FULL";
  else 
  {
    if (rear == -1) 
    {
      q[++rear] = item;
      front++;
    } 
    else
      q[++rear] = item;
  }
}
int del() 
{
  int k;
  if ((front > rear) || (front == -1))
    return (0);
  else {
    k = q[front++];
    return (k);
  }
}
void push(int item) 
{
  if (top == 19)
    cout<<"Stack overflow";
  else
    stack[++top] = item;
}
int pop() 
{
  int k;
  if (top == -1)
    return (0);
  else 
  {
    k = stack[top--];
    return (k);
  }
}

void bfs(int s, int n) 
{
  int p, i;
  add(s);
  visited[s] = 1;
  p = del();
  if (p != 0)
    cout<<p<<" ";
  while (p != 0)
  {
    for (i = 1; i <= n; i++)
      if ((a[p][i] != 0) && (visited[i] == 0)) 
      {
        add(i);
        visited[i] = 1;
      }
    p = del();
    if (p != 0)
      cout<<p<<" ";
  }
  for (i = 1; i <= n; i++)
  if (visited[i] == 0)
  bfs(i, n);
}

void dfs(int s, int n) 
{
  int i, k;
  push(s);
  visited[s] = 1;
  k = pop();
  if (k != 0)
    cout<<k<<" ";
  while (k != 0) 
  {
    for (i = 1; i <= n; i++)
      if ((a[k][i] != 0) && (visited[i] == 0)) 
      {
        push(i);
        visited[i] = 1;
      }
    k = pop();
    if (k != 0)
      cout<<k<<" ";
  }
  for (i = 1; i <= n; i++)
    if (visited[i] == 0)
      dfs(i, n);
}

int main() 
{
  int n, i, s, ch, j;
  char c, dummy;
  cout<<"Enter the number of Vertices : ";
  cin>>n;

  cout<<"Enter 1 if True \nEnter 0 if False"<<endl;
  for (i = 1; i <= n; i++)
  {
    for (j = i; j <= n; j++) 
    {
      if (i != j) 
      {
        cout<<" "<<i<<" <--> "<<j<<" : ";
        cin>>a[i][j];
        a[j][i] = a[i][j];
      } 
      else 
      {
        a[i][j] = 0;
      }
    }
  }
  cout<<"\nThe Adjacency Matrix is : \n";
  for (i = 1; i <= n; i++) 
  {
    for (j = 1; j <= n; j++)
    {
      cout<<a[i][j]<<" ";
    }
    cout<<endl;
  }

  do 
  {
    for (i = 1; i <= n; i++)
      visited[i] = 0;
    cout<<"\n1.BFS"<<endl;
    cout<<"2.DFS"<<endl;
    cout<<"0.Exit"<<endl;

    cout<<"Enter Your Choice : ";
    cin>>ch;
    cout<<"\nEnter Source Vertex : ";
    cin>>s;
    cout<<"\n";
    switch (ch) 
    {
      case 1:
        bfs(s, n);
        cout<<"\n";
        break;
        
      case 2:
        dfs(s, n);
        cout<<"\n";
        break;
  
      case 0:
        cout<<"End";
      break;
    }
  } while (ch!=0);
}
