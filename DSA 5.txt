//Threaded binary tree
#include <iostream>
using namespace std;
struct node
{
node *left=NULL;
node *right=NULL;
bool l;
int data;
bool r;
};
node * insert(node *root, int key)
{
node *ptr=root;
node *par=NULL;
while(ptr!=NULL)
{
par=ptr;
if(key<ptr->data){
if(ptr->l==0){
ptr=ptr->left;
}
else{
break;
}
}
else{

if(ptr->r==0){
ptr=ptr->right;
}
else{
break;
}
}
}
if(par==NULL){
node *temp=new node;
temp->data=key;
temp->l=1;
temp->r=1;
root=temp;
}
else if(key<par->data){
node *temp=new node;
temp->data=key;
temp->left=par->left;
temp->l=1;
temp->right=par;
temp->r=1;
par->left=temp;
par->l=0;
}
else{
node *temp=new node;

temp->data=key;
temp->left=par;
temp->l=1;
temp->right=par->right;
temp->r=1;
par->right=temp;
par->r=0;
}
return root;
}
node * inor_succ(node *temp)
{
if(temp->r==1){
return temp->right;
}
temp=temp->right;
while(temp->l==0){
temp=temp->left;
}
return temp;
}
void print(node *root)
{
if(root==NULL)
{
cout<<"Tree is empty."<<endl;
return;

}
while(root->l==0){
root=root->left;
}
while(root!=NULL){
cout<<root->data<<" ";
root=inor_succ(root);
}
}
int main()
{
node *root=NULL;
root=insert(root,25);
root=insert(root,15);
root=insert(root,30);
root=insert(root,8);
root=insert(root,16);
root=insert(root,17);
root=insert(root,19);
root=insert(root,11);
cout<<"inorder traversal:";
print(root);
return 0;
}