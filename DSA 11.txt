//Vinit Chaudhari(SYCOA34)
//Binary search tree
#include <iostream>
using namespace std;

struct node
{
int data;
node*left;
node*right;
};
struct node* newnode(int data)
{
node* temp=new node();
temp->data = data;
temp->left = temp->right = NULL;
return temp;
}
struct node* insert(struct node* node, int key)
{
if (node == NULL)
return newnode(key);
if (key < node->data)
node->left = insert(node->left, key);
else
node->right = insert(node->right, key);
return node;
}

void inorder(node *temp){
if(temp == NULL)
return;
inorder(temp->left);
cout<<temp->data<<" ";
inorder(temp->right);
}
struct node* search(struct node* root, int key)
{
if (root == NULL || root->data == key)
return root;
if (root->data < key)
return search(root->right, key);
return search(root->left, key);
}
struct node* minValuenode(struct node* node)
{
struct node* current = node;
while (current && current->left != NULL)
current = current->left;

return current;
}
struct node* deletenode(struct node* root, int key)
{
if (root == NULL)
return root;

if (key < root->data)
root->left = deletenode(root->left, key);
else if (key > root->data)
root->right = deletenode(root->right, key);
else {
if (root->left == NULL and root->right == NULL)
return NULL;
else if (root->left == NULL) {
struct node* temp = root->right;
free(root);
return temp;
}
else if (root->right == NULL) {
struct node* temp = root->left;
free(root);
return temp;
}
struct node* temp = minValuenode(root->right);
root->data = temp->data;
root->right = deletenode(root->right, temp->data);
}
return root;
}
int main()
{ int ch;
node *root = NULL;
do{

cout<<endl <<"1.insert"<<endl<<"2.traversal"<<endl <<"3.search"<<endl<<"4.delete"<<endl;
cout<<"Enter your choice ";
cin>>ch;
switch(ch)
{
case 1:
cout<<"Enter the data to insert in the tree"<<endl;
int a;
cin>>a;
root = insert(root,a);
break;
case 2:
inorder(root);
break;
case 3:
cout<<"enter key to search";
int key;
cin>>key;
search(root,key);
break;
case 4:
cout<<"\n enter key to delete";
int b;
cin>>b;
root = deletenode(root, b);
break;
}

}while(1);
return 0;
}